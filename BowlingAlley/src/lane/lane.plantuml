@startuml

title __LANE's Class Diagram__\n

  namespace Lane {
    namespace Lane {
      class lane.Lane {
          - ball : int
          - bowlIndex : int
          - bowlerIterator : Iterator
          - canThrowAgain : boolean
          - currentThrower : Bowler
          - finalScores : int[][]
          - frameNumber : int
          - gameFinished : boolean
          - gameIsHalted : boolean
          - gameNumber : int
          - ls : LaneScore
          - party : Party
          - partyAssigned : boolean
          - setter : Pinsetter
          - subscribers : Vector
          - tenthFrameStrike : boolean
          + Lane()
          + assignParty()
          + getPinsetter()
          + isPartyAssigned()
          + pauseGame()
          + receivePinsetterEvent()
          + run()
          + subscribe()
          - publish()
          - resetScores()
      }
    }
  }
  

  namespace Lane {
    namespace Lane {
      class lane.Lane {
          - ball : int
          - bowlIndex : int
          - bowlerIterator : Iterator
          - canThrowAgain : boolean
          - currentThrower : Bowler
          - finalScores : int[][]
          - frameNumber : int
          - gameFinished : boolean
          - gameIsHalted : boolean
          - gameNumber : int
          - ls : LaneScore
          - party : Party
          - partyAssigned : boolean
          - setter : Pinsetter
          - subscribers : Vector
          - tenthFrameStrike : boolean
          + Lane()
          + assignParty()
          + getPinsetter()
          + isPartyAssigned()
          + pauseGame()
          + receivePinsetterEvent()
          + run()
          + subscribe()
          - publish()
          - resetScores()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      interface lane.LaneEventInterface {
          {abstract} + getBall()
          {abstract} + getBowler()
          {abstract} + getCumulScore()
          {abstract} + getCurScores()
          {abstract} + getFrame()
          {abstract} + getFrameNum()
          {abstract} + getIndex()
          {abstract} + getParty()
          {abstract} + getScore()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      interface lane.LaneEventInterface {
          {abstract} + getBall()
          {abstract} + getBowler()
          {abstract} + getCumulScore()
          {abstract} + getCurScores()
          {abstract} + getFrame()
          {abstract} + getFrameNum()
          {abstract} + getIndex()
          {abstract} + getParty()
          {abstract} + getScore()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      interface lane.LaneObserver {
          {abstract} + receiveLaneEvent()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      interface lane.LaneObserver {
          {abstract} + receiveLaneEvent()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      class lane.LaneScore {
          - cumulScores : int[][]
          - scores : HashMap
          + getCumulScore()
          + getCumulScores()
          + getScoresHashMap()
          + initScoresArrays()
          + markScore()
          + setScoresInHashMap()
          ~ LaneScore()
          - getScore()
          - getScoreFromKey()
          - incrementCumulScore()
          - setCumulScore()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      class lane.LaneScore {
          - cumulScores : int[][]
          - scores : HashMap
          + getCumulScore()
          + getCumulScores()
          + getScoresHashMap()
          + initScoresArrays()
          + markScore()
          + setScoresInHashMap()
          ~ LaneScore()
          - getScore()
          - getScoreFromKey()
          - incrementCumulScore()
          - setCumulScore()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      interface lane.LaneServer {
          {abstract} + subscribe()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      interface lane.LaneServer {
          {abstract} + subscribe()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      class lane.LaneStatusView {
          ~ laneNum : int
          ~ laneShowing : boolean
          ~ psShowing : boolean
          - curBowler : JLabel
          - jp : JPanel
          - lane : Lane
          - lv : LaneView
          - maintenance : JButton
          - pinsDown : JLabel
          - psv : PinSetterView
          - viewLane : JButton
          - viewPinSetter : JButton
          + LaneStatusView()
          + actionPerformed()
          + receiveLaneEvent()
          + receivePinsetterEvent()
          + showLane()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      class lane.LaneStatusView {
          ~ laneNum : int
          ~ laneShowing : boolean
          ~ psShowing : boolean
          - curBowler : JLabel
          - jp : JPanel
          - lane : Lane
          - lv : LaneView
          - maintenance : JButton
          - pinsDown : JLabel
          - psv : PinSetterView
          - viewLane : JButton
          - viewPinSetter : JButton
          + LaneStatusView()
          + actionPerformed()
          + receiveLaneEvent()
          + receivePinsetterEvent()
          + showLane()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      class lane.LaneView {
          ~ ballLabel : JLabel[][]
          ~ balls : JPanel[][]
          ~ bowlers : Vector
          ~ cpanel : Container
          ~ frame : JFrame
          ~ lane : Lane
          ~ maintenance : JButton
          ~ scoreLabel : JLabel[][]
          - initDone : boolean
          + LaneView()
          + actionPerformed()
          + display()
          + receiveLaneEvent()
          - makeFrame()
      }
    }
  }
  

  namespace  Lane{
    namespace ane {
      class lane.LaneView {
          ~ ballLabel : JLabel[][]
          ~ balls : JPanel[][]
          ~ bowlers : Vector
          ~ cpanel : Container
          ~ frame : JFrame
          ~ lane : Lane
          ~ maintenance : JButton
          ~ scoreLabel : JLabel[][]
          - initDone : boolean
          + LaneView()
          + actionPerformed()
          + display()
          + receiveLaneEvent()
          - makeFrame()
      }
    }
  }
  

  lane.Lane .up.|> PinsetterObserver
  lane.Lane .up.|> pinsetter.PinsetterObserver
  lane.LaneStatusView .up.|> ActionListener
  lane.LaneStatusView .up.|> LaneObserver
  lane.LaneStatusView .up.|> PinsetterObserver
  lane.LaneStatusView .up.|> java.awt.event.ActionListener
  lane.LaneStatusView .up.|> lane.LaneObserver
  lane.LaneStatusView .up.|> pinsetter.PinsetterObserver
  lane.LaneView .up.|> java.awt.event.ActionListener
  lane.LaneView .up.|> lane.LaneObserver
  lane.LaneView .up.|> ActionListener
  lane.LaneView .up.|> LaneObserver


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
